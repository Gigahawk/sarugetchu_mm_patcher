package main

import (
	"fmt"
	//"sync"
)

var HASHES = []uint32{
	0x1fa8a5bf,
	0x95d0e0fc,
	0xbda5230a,
	0x9b15f8d1,
	0x7c6f3ace,
	0x00911730,
	0x704ebac4,
	0x3a64fa71,
	0x635a27be,
	0x48014db2,
	0xf8b6d1e8,
	0xed9d03fc,
	0xc63a0383,
	0x2c442aac,
	0x090a2bac,
	0x8d0198bb,
	0x6ac798bb,
	0x478d99bb,
	0x1ca8bbbf,
	0xa05b2dac,
	0x7d212eac,
	0x5ae72eac,
	0x934d43d0,
	0x8ba264d4,
	0x686865d4,
	0x1ddd46ac,
	0xfaa247ac,
	0xd76848ac,
	0x91f449ac,
	0xb2f8ec60,
	0xaa4d0e65,
	0x87130f65,
	0x28464cac,
	0x050c4dac,
	0x5afe0ee1,
	0x758d2fe5,
	0x525330e5,
	0x2f1931e5,
	0xeb3b64ac,
	0xc80165ac,
	0xa5c765ac,
	0x828d66ac,
	0x5f5367ac,
	0xb1fc2c81,
	0x5c272d50,
	0x3cecf223,
	0x8205e9b5,
	0x7243e526,
	0x4abee95e,
	0x149e220b,
	0x6e6049c5,
	0xe148210c,
	0xf174772e,
	0x3e9a5de5,
	0x65f9a065,
	0xb76fe61f,
	0x14031b66,
	0x94ff803b,
	0xb6410652,
	0x03242e3a,
	0x7b203aa0,
	0xeaf83ebb,
	0x53791f94,
	0xfdac96c5,
	0xbf34d7af,
	0xaf4c8499,
	0xc9448ba5,
	0xa60a8ca5,
	0x245dc640,
	0x0123c740,
	0x00940549,
	0xd2aeb433,
	0xaf74b533,
	0x36c5de03,
	0x3943e3cc,
	0x0569c31e,
	0x3cdca805,
	0x3b4fb376,
	0x594309b8,
	0xe3710b47,
	0xd7d0bd8c,
	0xd1e4d526,
	0x6fd16046,
	0x88455768,
	0x87f51e0c,
	0x41f34892,
	0xe76bf53f,
	0x5973ad65,
	0xdd798eb5,
	0x44f20e4a,
	0x567ea3b3,
	0x6cc96933,
	0xc55668f7,
	0x1626079d,
	0x45912030,
	0xc35e32d9,
	0xf2b5553f,
	0xdcd7b35d,
	0x8d3a2011,
	0x06143ebb,
	0x5ebb5f0b,
	0x96696a96,
	0x7a8e0451,
	0x0e36c98a,
	0xdd45c596,
	0xb2b250a8,
	0x4c084c39,
	0xcd7a2b3c,
	0xe13aef70,
	0x49913fd2,
	0xa5bebda1,
	0xf2bc8cb1,
	0x72c71ee8,
	0x6e0a878d,
	0x3a1b68cc,
	0xac56964e,
	0x2f029adf,
	0x05f7cae8,
	0x3c6cf60b,
	0x0e65ae26,
	0x90227dc0,
	0x0bff279e,
	0x33097168,
	0x50ee5500,
	0x774d9980,
	0xc9c3de3a,
	0x26571381,
	0xa6537956,
	0x5068ea37,
	0x2dda34cc,
	0xd94a080a,
	0x742f504a,
	0x652fb5ee,
	0x0cbb72b6,
	0xad3a3244,
	0x97d37aab,
	0xd188cfca,
	0x4973687f,
	0xe4ea2275,
	0xc1b02375,
	0x9e762475,
	0xf14ff112,
	0xce15f212,
	0xabdbf212,
	0x88a1f312,
	0x7c9749a4,
	0x595d4aa4,
	0x36234ba4,
	0x13e94ba4,
	0xf0ae4ca4,
	0xcd744da4,
	0xaa3a4ea4,
	0x87004fa4,
	0x64c64fa4,
	0x418c50a4,
	0x6d3066a4,
	0x4af666a4,
	0x27bc67a4,
	0x048268a4,
	0xa9b507f9,
	0x867b08f9,
	0x634109f9,
	0x9e3fabdb,
	0x7b05acdb,
	0x58cbacdb,
	0x3591addb,
	0x1257aedb,
	0xef1cafdb,
	0xcce2afdb,
	0xa9a8b0db,
	0x866eb1db,
	0xb212c7db,
	0x8fd8c7db,
	0x4964c9db,
	0x3d15eec2,
	0x1adbeec2,
	0xf7a0efc2,
	0xd466f0c2,
	0xb12cf1c2,
	0x8ef2f1c2,
	0x6bb8f2c2,
	0x487ef3c2,
	0x2544f4c2,
	0x51e809c3,
	0x2eae0ac3,
	0xe8390cc3,
	0x9fbbe904,
	0x7c81ea04,
	0x5947eb04,
	0x4ae00705,
	0xc7093bca,
	0xa4cf3bca,
	0x81953cca,
	0x5e5b3dca,
	0x3b213eca,
	0x18e73eca,
	0xf5ac3fca,
	0xd27240ca,
	0xaf3841ca,
	0x8cfe41ca,
	0xb8a257ca,
	0x956858ca,
	0x4ff459ca,
	0x2cba5aca,
	0x09805bca,
	0x2410bf56,
	0x01d6bf56,
	0xde9bc056,
	0x16e6b047,
	0xf3abb147,
	0xd071b247,
	0xad37b347,
	0x8afdb347,
	0x67c3b447,
	0x4489b547,
	0x214fb647,
	0xfe14b747,
	0x2ab9cc47,
	0x077fcd47,
	0xc10acf47,
	0x0b2b9a1a,
	0xe8f09a1a,
	0xc5b69b1a,
	0xa27c9c1a,
	0x7f429d1a,
	0x5c089e1a,
	0x39ce9e1a,
	0x16949f1a,
	0xf359a01a,
	0x1ffeb51a,
	0xfcc3b61a,
	0xb64fb81a,
	0x9315b91a,
	0x70dbb91a,
	0xa7a33478,
	0x84693578,
	0x612f3678,
	0x3ef53678,
	0x1bbb3778,
	0xf8803878,
	0xd5463978,
	0xb20c3a78,
	0x8fd23a78,
	0xbb765078,
	0x983c5178,
	0x75025278,
	0x52c85278,
	0x2f8e5378,
	0xfa14b2f0,
	0xd7dab2f0,
	0x43a306cc,
	0x206907cc,
	0xfd2e08cc,
	0xeec724cc,
	0x2a4fffe0,
	0x071500e1,
	0xe4da00e1,
	0xd5731de1,
	0x5b7e7d08,
	0x38447e08,
	0x150a7f08,
	0x06a39b08,
	0xf87aadda,
	0xd540aeda,
	0xb206afda,
	0x8fccafda,
	0x6c92b0da,
	0x4958b1da,
	0x261eb2da,
	0x03e4b2da,
	0xe0a9b3da,
	0xbd6fb4da,
	0xe913cada,
	0xc6d9cada,
	0x8065ccda,
	0x0aa9c2dd,
	0xe76ec3dd,
	0xc434c4dd,
	0xa1fac4dd,
	0xba9dc5b3,
	0x9763c6b3,
	0x7429c7b3,
	0x51efc7b3,
	0x4e134f62,
	0x4ba8aeb6,
	0x3b62eeeb,
	0xf8c51a5b,
	0x239c3a3f,
	0x27a584ab,
	0x09ea1505,
	0xe0fa8db2,
	0x8022dc60,
	0xfb4fc301,
	0x6f5c6775,
	0xa7de0803,
	0x196f6654,
	0x9695d0b9,
	0x42a6759c,
	0x5472a604,
	0xbe06ab2e,
	0x458a35e8,
	0xb1609981,
	0x9b420d22,
	0x6bae4eba,
	0x777af7ad,
	0x03bad6fa,
	0xd96eb956,
	0xd90b6c44,
	0x245c46fe,
	0x61ecc05e,
	0x02237236,
	0xaeb5ea36,
	0x8a81a839,
	0x5122c246,
	0x950be949,
	0x77f7ad4b,
	0x8ace875f,
	0x27916e62,
	0xdefe0477,
	0xcf72e888,
	0x3d9378ba,
	0x5adb13c0,
	0xfd47ebcf,
	0x413112d3,
	0x231dd7d4,
	0x36f4b0e8,
	0xd3b697eb,
	0x8a242e00,
	0x7b981112,
	0x4c1375f1,
	0x6d4e62b7,
	0x19e1dab7,
	0x15cb2bbe,
	0xbc4db2c7,
	0x0037d9ca,
	0xe2229ecc,
	0xf5f977e0,
	0x92bc5ee3,
	0x492af5f7,
	0x3a9ed809,
	0x258a9b71,
	0xf7a0ff38,
	0xa3337839,
	0x46a04f49,
	0x8a89764c,
	0x6c753b4e,
	0x7f4c1562,
	0x1c0ffc64,
	0xd37c9279,
	0xc4f0758b,
	0xaa4f4bb6,
	0xb51722e2,
	0xdd0e8432,
	0x08e5a316,
	0x94772982,
	0x76bcbadb,
	0x656b4538,
	0xe0982cd9,
	0x54a5d04c,
	0x6848db08,
	0x32f89d76,
	0x03687590,
	0xc1444bdb,
	0x2ad39ebf,
	0xcae9d0a3,
	0xbeb7222e,
	0x09a5afd5,
	0x46352a36,
	0x8c156309,
	0xad5050cf,
	0x59e3c8cf,
	0x55cd19d6,
	0xfc4fa0df,
	0x4039c7e2,
	0x22258ce4,
	0x35fc65f8,
	0xd2be4cfb,
	0x892ce30f,
	0x7aa0c621,
	0xc257ed09,
	0xed2d0dee,
	0x014ace58,
	0xe38e5fb2,
	0x560b10ea,
	0x4ab4ae0f,
	0xc5e195b0,
	0x39ee3924,
	0x29b2ad0e,
	0x4b81d598,
	0x703a1a67,
	0x215ca2df,
	0x2e17f0b1,
	0x0f1c0897,
	0xe37208c6,
	0xa3008c05,
	0xeeed18ad,
	0x2b7e930d,
	0xd131b544,
	0x7dc42d45,
	0xb5d6f447,
	0x79ae7e4b,
	0x20310555,
	0x641a2c58,
	0x4606f159,
	0xec55285c,
	0x59ddca6d,
	0xf69fb170,
	0xad0d4885,
	0x9e812b97,
	0x6e1c732f,
	0x50610489,
	0x1e37a3fb,
	0xea1b8014,
	0xdd0cbf3d,
	0x8849f5dc,
	0xd3368284,
	0x10c7fce4,
	0x84864f9e,
	0x6bdc4db1,
	0x4dc812b3,
	0xfd61d3c9,
	0xb4cf69de,
	0xa5434df0,
	0xdbee1706,
	0x144681be,
	0x08bc395f,
	0x6d925eb4,
	0xf50f66bc,
	0xeaf6aea1,
	0xe6e0ffa7,
	0xc60f4cca,
	0x63d232cd,
	0x0bb4acf3,
	0xc414bdeb,
	0x71322990,
	0x9c084974,
	0x48c1bcdc,
	0x2a064e36,
	0xf98eea95,
	0x74bcd136,
	0xe8c875aa,
	0x6cef2420,
	0x961c7cff,
	0xb7b108eb,
	0x817d3de2,
	0x758ede35,
	0x3773b963,
	0xbef6431d,
	0x2e0eaf2c,
	0x9dc85433,
	0x1e04d30b,
	0xda58cf93,
	0x729c99d6,
	0x93d7869c,
	0x3f6aff9c,
	0x3b5450a3,
	0xe2d6d6ac,
	0x26c0fdaf,
	0x08acc2b1,
	0x1b839cc5,
	0x6fb319dd,
	0xb49683dd,
	0x6027fdee,
	0xa4a74bbc,
	0x396aa1f0,
	0x50b4ad2a,
	0xbfe6b767,
	0xe118be21,
	0x6ef9a071,
	0xd56e033e,
	0x752b4bfd,
	0x4fc06c82,
	0xac549e77,
	0x481c2bc2,
	0x3d2b9858,
	0xd3d2cdba,
	0x858d9d27,
	0x72ba97d9,
	0x89176150,
	0xf3344c88,
	0xb01595df,
	0x2d33b64b,
	0x0af9b64b,
	0x389cbb4b,
	0x51a02d95,
	0x2e662e95,
	0x5c093395,
	0x2cc228f3,
	0x098829f3,
	0xe64d2af3,
	0xc3132bf3,
	0xf6105a61,
	0xd3d65a61,
	0xb09c5b61,
	0x8d625c61,
	0x6a285d61,
	0x47ee5d61,
	0x24b45e61,
	0x017a5f61,
	0xde3f6061,
	0xe98025c0,
	0xd97e0985,
	0xb6440a85,
	0x930a0b85,
	0x70d00b85,
	0x4d960c85,
	0x2a5c0d85,
	0x07220e85,
	0xe00c278e,
	0x795fd65d,
	0x5625d75d,
	0x33ebd75d,
	0x10b1d85d,
	0x66ca7db1,
	0x43907eb1,
	0x20567fb1,
	0xfd1b80b1,
	0xdae180b1,
	0x99c6af6c,
	0xcd854dd7,
	0xaa4b4ed7,
	0x87114fd7,
	0x64d74fd7,
	0x84d13aec,
	0x9f5b776c,
	0x7c21786c,
	0x59e7786c,
	0x36ad796c,
	0xce01e3e2,
	0xbc99d59d,
	0x995fd69d,
	0x7625d79d,
	0x53ebd79d,
	0xd7f10a07,
	0x3c7649f5,
	0x193c4af5,
	0xf6014bf5,
	0xd3c74bf5,
	0xb08d4cf5,
	0x8d534df5,
	0x0e3f972a,
	0xeb04982a,
	0xc8ca982a,
	0xa590992a,
	0x82569a2a,
	0xa1c36e8e,
	0x7ba57fee,
	0x586b80ee,
	0x353181ee,
	0x12f781ee,
	0xefbc82ee,
	0xcc8283ee,
	0xa94884ee,
	0x860e85ee,
	0xba10e184,
	0x73682b30,
	0x502e2c30,
	0x2df42c30,
	0x0aba2d30,
	0xd2383163,
	0x72e2c40c,
	0x4fa8c50c,
	0x2c6ec60c,
	0x0934c70c,
	0xf5c490ee,
	0xeb51a9a7,
	0xc817aaa7,
	0xa5ddaaa7,
	0x82a3aba7,
	0x6a1d8d6f,
	0xd720cd3b,
	0xb86c364f,
	0x46996dc7,
	0xa9eade76,
	0x989593b3,
	0x68e115db,
	0x76c2469c,
	0xb8f7894c,
	0x56049a6d,
	0x598d4c56,
	0xc894de84,
	0xd0586fdc,
	0x27a4f0d4,
	0x2204d6ca,
	0xa9cdfab7,
	0xa82e9c36,
	0x2b260ece,
	0x88442e07,
	0x953eb6e9,
	0x7204b7e9,
	0x4fcab7e9,
	0x2c90b8e9,
	0x0956b9e9,
	0xe61bbae9,
	0xc3e1bae9,
	0xa0a7bbe9,
	0x7d6dbce9,
	0x2c3ed466,
	0xa72e5c7a,
	0x84f45c7a,
	0x61ba5d7a,
	0x3e805e7a,
	0x1b465f7a,
	0xf80b607a,
	0xd5d1607a,
	0xc7a55fa0,
	0xa46b60a0,
	0x813161a0,
	0x5ef761a0,
	0x3bbd62a0,
	0x188363a0,
	0xf54864a0,
	0xd20e65a0,
	0x39f529e9,
	0xc7f858dc,
	0x5eb674d4,
	0xda2abe51,
	0x4f6d6cd9,
	0x76ccaf59,
	0xc842f513,
	0x25d6295a,
	0xa5d28f2f,
	0x2bc32a98,
	0x80918102,
	0x58257bf5,
	0x43914ed2,
	0x287bd27c,
	0x722ebb0b,
	0xd007e6a3,
	0x24cea8df,
	0xbd1e824a,
	0x814b7cb3,
	0x5e117db3,
	0xeb24d2d1,
	0x726c21f3,
	0x03e4cd15,
	0xf805f0a5,
	0xaa6f7a50,
	0x2f62887b,
	0xa7383ea3,
	0x84fe3ea3,
	0x58401ea3,
	0x656e89e2,
	0xfd32e82a,
	0xdaf8e82a,
	0xb7bee92a,
	0xfeb8ca50,
	0xb3534589,
	0x9b496b0f,
	0x780f6c0f,
	0xac9781d4,
	0xe9757ff7,
	0xb8b90462,
	0x4516e70a,
	0x16e5bf6d,
	0xf3aac06d,
	0xcf772913,
	0x20e3e63d,
	0x389f9baa,
	0x15659caa,
	0xe103be7c,
	0xaaa8edb2,
	0x6a003baf,
	0x47c63baf,
	0x83163f44,
	0x8468b140,
	0x187b3c66,
	0x25e6d796,
	0x1566b0a1,
	0x8e73be1d,
	0xf3813d6c,
	0xd0473e6c,
	0x44d1c934,
	0x21262baa,
	0xc29edbdd,
	0xe781ab51,
	0x1530b183,
	0x8ed5ded3,
	0x820e6f14,
	0x5fd46f14,
	0x3c9a7014,
	0xdb175d62,
	0x7c49a157,
	0x9ce158f2,
	0x19fa3f66,
	0xad4e55a8,
	0xc63618c1,
	0x89e08f98,
	0xb26de635,
	0x71a9e042,
	0xfa653e68,
	0xcdb2d8bf,
	0x66469229,
	0x25839e9b,
	0x5edaaa1c,
	0x306a9905,
	0xddc50fae,
	0x8df2c654,
	0x260f4e12,
	0x9f2c20a8,
	0xb00a05b0,
	0x932551d9,
	0x70eb51d9,
	0xe4c7004d,
	0x412e67dd,
	0x5b48bba4,
	0x380ebca4,
	0x6cc0093a,
	0xa9636665,
	0x0320b216,
	0xe0e5b216,
	0xd4165a9b,
	0x71033f3a,
	0x80fe334e,
	0xed5ea34f,
	0xbcf2c6fc,
	0x99b8c7fc,
	0x45e16020,
	0xfebbe44a,
	0x20b329ab,
	0xfd782aab,
	0xda3e2bab,
	0x8914f4f8,
	0xb2516b88,
	0xfccaee67,
	0xd990ef67,
	0x85575c9e,
	0x3e11f98e,
	0x155bde78,
	0x8ef4f33d,
	0xc6650571,
	0xa32b0671,
	0x80f10671,
	0xff7a6abd,
	0x90937a3f,
	0x0a42108c,
	0x0fdfc236,
	0xe5d5ceb1,
	0x1e0a1074,
	0x2ff511d3,
	0x00ff15d2,
	0x1e656e38,
	0x538b0575,
	0x9ce16be2,
	0x19faa645,
	0x2b6aedc3,
	0x8ce88fa0,
	0x48d02db6,
	0x9560bc50,
	0x4cde5405,
	0x098e3cb3,
	0xea0603ba,
	0x6f34d7b2,
	0x1988ae91,
	0x02e54edc,
	0xf25230cc,
	0x57ff733f,
	0x4dbdde02,
	0xe6d6ddab,
	0xb0ffcadb,
	0x5d55e9be,
	0x0722afb2,
	0xe1cdd8b9,
	0xf1453e5f,
	0x3ed3e300,
	0x65322781,
	0xb7a86c3b,
	0x143ca181,
	0x94380757,
	0xb67e6c4c,
	0x03a9e5e7,
	0x604eda0f,
	0xfde9fcbf,
	0xaf89ea93,
	0x54110b1e,
	0x38ff898c,
	0xdd92277c,
	0x04f26afc,
	0x5668b0b6,
	0xb3fbe4fc,
	0x33f84ad2,
	0xb130371d,
	0x76ec174c,
	0xa707263d,
	0xf89bc790,
	0xaa3bb564,
}

const maxRoutines = 32
var semaphore = make(chan struct{}, maxRoutines)

func swapEndianness32(num uint32) uint32 {
	return (num>>24)&0xff | // move byte 3 to byte 0
		(num<<8)&0xff0000 | // move byte 1 to byte 2
		(num>>8)&0xff00 |   // move byte 2 to byte 1
		(num<<24)&0xff000000 // move byte 0 to byte 3
}

func validHash(hash uint32) bool {
	for _, value := range HASHES {
		if value == hash {
			return true
		}
	}
	return false
}


func genHash(path string) uint32 {
	var crc uint32 = 0
	for _, c := range path {
		crc = (crc * 0x25) + uint32(c)
	}

	return swapEndianness32(crc)
}

func bruteForcePaths(path string) {
	semaphore <- struct{}{}
	//const validChars string = "abcdefghijklmnopqrstuvwxyz0123456789/._"
	const validChars string = "abcdefghijklmnopqrstuvwxyz0123456789._"
	const suffix string = ".gz"
	var next_path string
	var full_path string
	var hash uint32
	for _, c := range validChars {
		next_path = path + string(c)
		full_path = next_path + suffix
		hash = genHash(full_path)
		fmt.Printf("%08x: %s\n", hash, full_path)
		<-semaphore
		//if validHash(hash) {
		//	fmt.Printf("%08x: %s\n", hash, full_path)
		//}

		go bruteForcePaths(next_path)
	}
}


func main() {
	go bruteForcePaths("gz/")
	for {}
	//var out uint32 = genHash("gz/menu_common.gz")
	//fmt.Printf("%08x\n", out)
	//fmt.Println(validHash(out))
}